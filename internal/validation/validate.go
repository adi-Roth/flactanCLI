package validation

import (
	"github.com/adi-Roth/flactanCLI/internal/config"
	"github.com/adi-Roth/flactanCLI/internal/system"
	"github.com/adi-Roth/flactanCLI/internal/utils"
)

// RunValidation performs system and config validation
func RunValidation(configDir string) {
	fs := utils.OSFileSystem{}
	// get config files path
	configFile := config.GetFilePath(configDir, "config.yaml")
	toolsFile := config.GetFilePath(configDir, "tools.yaml")

	utils.Logger.Info("üîç Running validation checks...")

	// Check OS Compatibility
	osName, arch, osVersion := system.GetOSInfo()
	utils.Logger.Infof("‚úî OS Detected: %s (%s) - %s ‚úÖ", osName, arch, osVersion)

	// Check Internet Connectivity
	if system.CheckInternet() {
		utils.Logger.Info("‚úî Internet Access: Connected ‚úÖ")
	} else {
		utils.Logger.Warn("‚úñ Internet Access: Not Connected ‚ùå")
	}

	// Check Admin Privileges
	if system.CheckAdminPrivileges() {
		utils.Logger.Info("‚úî Sudo Privileges: Available ‚úÖ")
	} else {
		utils.Logger.Warn("‚úñ Sudo Privileges: Not Available ‚ùå")
	}

	// Check Disk Space
	requiredSpace := uint64(10) // Minimum 50GB free space
	if system.CheckDiskSpace(requiredSpace) {
		utils.Logger.Infof("‚úî Disk Space: %dGB Free ‚úÖ", requiredSpace)
	} else {
		utils.Logger.Warnf("‚úñ Disk Space: Less than %dGB Free ‚ùå", requiredSpace)
	}

	// Validate config files
	validateFile(fs, configFile, "config.yaml")
	validateFile(fs, toolsFile, "tools.yaml")
}

// validateFile checks if the file exists and is valid
var validateFile = func(fs utils.OSFileSystem, filename string, displayName string) {
	switch {
	case !fs.FileExists(filename):
		utils.Logger.Warnf("‚úñ %s is missing ‚ùå\n", displayName)
	case !fs.ValidateYAML(filename):
		utils.Logger.Warnf("‚úñ %s is invalid ‚ùå\n", displayName)
	default:
		utils.Logger.Infof("‚úî %s is valid ‚úÖ\n", displayName)
	}
}
