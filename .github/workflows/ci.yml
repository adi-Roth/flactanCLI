name: CI Pipeline

on:
  pull_request:
    branches:
      - main

jobs:
  validate-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Check branch name
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          if [[ ! "$BRANCH_NAME" =~ ^(fix|feature)/ ]]; then
            echo "‚ùå Only 'fix/*' or 'feature/*' branches are allowed!"
            exit 1
          fi

  lint-and-test:
    runs-on: ubuntu-latest
    needs: validate-branch
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Run Linter
        run: |
          go install golang.org/x/lint/golint@latest
          golint ./...

      - name: Run Tests
        run: make test

  tag-version:
    runs-on: ubuntu-latest
    needs: lint-and-test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Git user
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

      - name: Determine version type and create tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          VERSION=$(git tag --sort=-v:refname | head -n 1 | sed 's/v//')

          if [[ -z "$VERSION" ]]; then
            VERSION="0.1.0"
          fi

          MAJOR=$(echo "$VERSION" | cut -d. -f1)
          MINOR=$(echo "$VERSION" | cut -d. -f2)
          PATCH=$(echo "$VERSION" | cut -d. -f3)

          if [[ "$BRANCH_NAME" =~ ^feature/ ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif [[ "$BRANCH_NAME" =~ ^fix/ ]]; then
            PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION"

          git tag $NEW_VERSION
          git push https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git $NEW_VERSION
